{"version":3,"sources":["MovieCard.tsx","Movies.tsx","MovieAppBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","card","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","MovieCard","movie","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","Avatar","aria-label","rated","title","subheader","released","CardMedia","image","poster","CardContent","Typography","variant","color","component","actors","CardActions","disableSpacing","IconButton","clsx","onClick","aria-expanded","Collapse","in","timeout","unmountOnExit","paragraph","plot","root","flexGrow","paper","padding","spacing","margin","Movies","Paper","Grid","container","id","map","key","menuButton","marginRight","MovieAppBar","AppBar","position","Toolbar","edge","width","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abdf1a67.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MovieProps from './MovieProps';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    card: {\n      maxWidth: 345,\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: red[500],\n    },\n  }),\n);\n\nconst MovieCard: React.SFC<MovieProps> = (movie) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" className={classes.avatar}>\n            {movie.rated}\n          </Avatar>\n        }\n        \n        title={movie.title}\n        subheader={movie.released}\n      />\n      <CardMedia\n        className={classes.media}\n        image={movie.poster}\n        title={movie.title}\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textPrimary\" component=\"p\">\n        Actors:\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n        {movie.actors}\n        </Typography>\n      </CardContent>\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n        <Typography paragraph>Plot:</Typography>\n        <Typography paragraph>{movie.plot}</Typography>\n        </CardContent>\n      </Collapse>\n    </Card>\n  );\n}\n\nexport default MovieCard;","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport MovieProps from './MovieProps';\nimport MovieCard from './MovieCard';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      margin: 'auto',\n      maxWidth: 1000,\n    }\n  }),\n);\n\nconst Movies: React.FC = () => {\n  const classes = useStyles();\n\n  const movies: Array<MovieProps> = [\n    {\n        id: \"cw0076759\",\n        title: \"Star Wars: Episode IV - A New Hope\",\n        rated: \"PG\",\n        poster: \"http://ia.media-imdb.com/images/M/MV5BMjE2MzQwMTgxN15BMl5BanBnXkFtZTcwMDQzNjk2OQ@@._V1_SX300.jpg\",\n        plot: \"Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a wookiee and two droids to save the galaxy from the Empire's world-destroying battle-station, while also attempting to rescue Princess Leia from the evil Darth Vader.\",\n        \"year\": \"1980\",\n        \"released\": \"20 Jun 1980\",\n        \"runtime\": \"124 min\",\n        \"genre\": \"Action, Adventure, Fantasy\",\n        \"director\": \"Irvin Kershner\",\n        \"writer\": \"Leigh Brackett (screenplay), Lawrence Kasdan (screenplay), George Lucas (story by)\",\n        \"actors\": \"Mark Hamill, Harrison Ford, Carrie Fisher, Billy Dee Williams\",\n        \"language\": \"English\",\n        \"country\": \"USA\",\n        \"awards\": \"Won 1 Oscar. Another 19 wins & 18 nominations.\",\n        \"metascore\": 80,\n        \"rating\": \"8.8\",\n        \"votes\": \"842,451\",\n        \"type\": \"movie\",\n        \"price\": \"13.5\"\n    },\n    {\n        \"title\": \"Star Wars: Episode V - The Empire Strikes Back\",\n        \"year\": \"1980\",\n        \"rated\": \"PG\",\n        \"released\": \"20 Jun 1980\",\n        \"runtime\": \"124 min\",\n        \"genre\": \"Action, Adventure, Fantasy\",\n        \"director\": \"Irvin Kershner\",\n        \"writer\": \"Leigh Brackett (screenplay), Lawrence Kasdan (screenplay), George Lucas (story by)\",\n        actors: \"Mark Hamill, Harrison Ford, Carrie Fisher, Billy Dee Williams\",\n        \"plot\": \"After the Rebel base on the icy planet Hoth is taken over by the Empire, Han, Leia, Chewbacca, and C-3PO flee across the galaxy from the Empire. Luke travels to the forgotten planet of Dagobah to receive training from the Jedi master Yoda, while Vader endlessly pursues him.\",\n        \"language\": \"English\",\n        \"country\": \"USA\",\n        \"awards\": \"Won 1 Oscar. Another 19 wins & 18 nominations.\",\n        \"poster\": \"http://ia.media-imdb.com/images/M/MV5BMjE2MzQwMTgxN15BMl5BanBnXkFtZTcwMDQzNjk2OQ@@._V1_SX300.jpg\",\n        \"metascore\": 80,\n        \"rating\": \"8.8\",\n        \"votes\": \"842,451\",\n        \"id\": \"cw0080684\",\n        \"type\": \"movie\",\n        \"price\": \"13.5\"\n    }\n];\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n            {movies.map(movie => \n                <MovieCard\n                    key={movie.id}\n                    title={movie.title}\n                    rated={movie.rated}\n                    id={movie.id}\n                    poster={movie.poster}\n                    released={movie.released}\n                    actors={movie.actors}\n                    plot={movie.plot}\n                 />\n            )}\n        </Grid>\n      </Paper>\n    </div>\n  );\n}\n\nexport default Movies;\n  ","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst MovieAppBar: React.FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Movies\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default MovieAppBar;","import React from 'react';\nimport './App.css';\nimport Movies from './Movies';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'typeface-roboto';\nimport MovieAppBar from './MovieAppBar';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n});\n\nconst App: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <MovieAppBar />\n      <Movies/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}